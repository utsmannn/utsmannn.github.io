(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{101:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return r})),a.d(t,"metadata",(function(){return o})),a.d(t,"toc",(function(){return i})),a.d(t,"default",(function(){return d}));var n=a(3),c=a(7),l=(a(0),a(111)),r={title:"Location"},o={unversionedId:"artifacts/location-lib",id:"artifacts/location-lib",isDocsHomePage:!1,title:"Location",description:"With location library you can access current location, observer current location and get place or address of current and specified location (search).",source:"@site/docs/artifacts/location-lib.md",slug:"/artifacts/location-lib",permalink:"/geolib/docs/artifacts/location-lib",editUrl:"https://github.com/utsmannn/geolib/blob/master/docs/docs/artifacts/location-lib.md",version:"current",sidebar:"docs",previous:{title:"Installation",permalink:"/geolib/docs/overview/installation"},next:{title:"Routes",permalink:"/geolib/docs/artifacts/routes-lib"}},i=[{value:"Download",id:"download",children:[]},{value:"Prerequisite class",id:"prerequisite-class",children:[]},{value:"Create <code>PlaceLocation</code>",id:"create-placelocation",children:[]},{value:"Current location",id:"current-location",children:[{value:"Observer current location",id:"observer-current-location",children:[]},{value:"Get current location",id:"get-current-location",children:[]},{value:"Get comparator current location (prev and current)",id:"get-comparator-current-location-prev-and-current",children:[]}]},{value:"Place Location",id:"place-location",children:[{value:"Structure class of <code>PlaceData</code>",id:"structure-class-of-placedata",children:[]},{value:"Get place from location",id:"get-place-from-location",children:[]},{value:"Search nearby place",id:"search-nearby-place",children:[]}]}],b={toc:i};function d(e){var t=e.components,a=Object(c.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"With location library you can access current location, observer current location and get place or address of current and specified location (search)."),Object(l.b)("h2",{id:"download"},"Download"),Object(l.b)("p",null,Object(l.b)("img",{parentName:"p",src:"https://artifactory-badge.herokuapp.com/artifactory?url=https://utsmannn.jfrog.io/artifactory/android/com/utsman/geolib/location/",alt:null})),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-kotlin"},"implementation 'com.utsman.geolib:location:{last_version}'\n")),Object(l.b)("hr",null),Object(l.b)("h2",{id:"prerequisite-class"},"Prerequisite class"),Object(l.b)("p",null,"You need ",Object(l.b)("inlineCode",{parentName:"p"},"FusedLocationProviderClient")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-kotlin"},"val fusedLocation = LocationServices.getFusedLocationProviderClient(context)\n")),Object(l.b)("h2",{id:"create-placelocation"},"Create ",Object(l.b)("inlineCode",{parentName:"h2"},"PlaceLocation")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-kotlin"},"val placesLocation = fusedLocation.createPlacesLocation(HERE_API_KEY)\n")),Object(l.b)("hr",null),Object(l.b)("h2",{id:"current-location"},"Current location"),Object(l.b)("h3",{id:"observer-current-location"},"Observer current location"),Object(l.b)("p",null,"This function build under ",Object(l.b)("inlineCode",{parentName:"p"},"CoroutineScope")," with return ",Object(l.b)("inlineCode",{parentName:"p"},"Flow")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-kotlin"},"MainScope().launch {\n    // start observer location\n    placesLocation.getLocationFlow()\n        .collect { location ->\n            // location result\n        }\n}\n")),Object(l.b)("h3",{id:"get-current-location"},"Get current location"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-kotlin"},"MainScope().launch {\n    val location = placesLocation.getLocationFlow().first()\n}\n")),Object(l.b)("h3",{id:"get-comparator-current-location-prev-and-current"},"Get comparator current location (prev and current)"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-kotlin"},"MainScope().launch {\nplacesLocation.getComparisonLocation()\n    .collect { comparisonLocation ->\n        val prevLocation = comparisonLocation.previousLocation\n        val currentLocation = comparisonLocation.currentLocation\n    }\n}\n")),Object(l.b)("hr",null),Object(l.b)("h2",{id:"place-location"},"Place Location"),Object(l.b)("h3",{id:"structure-class-of-placedata"},"Structure class of ",Object(l.b)("inlineCode",{parentName:"h3"},"PlaceData")),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Param"),Object(l.b)("th",{parentName:"tr",align:null},"type"),Object(l.b)("th",{parentName:"tr",align:null},"desc"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"hereId")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"String")),Object(l.b)("td",{parentName:"tr",align:null},"Id place from Here API")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"title")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"String")),Object(l.b)("td",{parentName:"tr",align:null},"Title of place")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"address")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"String")),Object(l.b)("td",{parentName:"tr",align:null},"Address of place")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"district")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"String")),Object(l.b)("td",{parentName:"tr",align:null},"District of place")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"city")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"String")),Object(l.b)("td",{parentName:"tr",align:null},"City of place")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"location")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"Location")),Object(l.b)("td",{parentName:"tr",align:null},"Location of place")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"distance")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"Double")),Object(l.b)("td",{parentName:"tr",align:null},"Distance of current location and place")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"category")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"String")," nullable"),Object(l.b)("td",{parentName:"tr",align:null},"Category of place")))),Object(l.b)("h3",{id:"get-place-from-location"},"Get place from location"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-kotlin"},"val result: Result<List<PlaceData>> = placesLocation.getPlacesLocation(location)\n\nresult.doOnSuccess { places ->\n    // handle success\n}\n\nresult.doOnFailure {\n    // handler failure\n}\n")),Object(l.b)("h3",{id:"search-nearby-place"},"Search nearby place"),Object(l.b)("p",null,"Search place is searching nearby place on location by query with data result ",Object(l.b)("inlineCode",{parentName:"p"},"List<PlaceData>")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-kotlin"},"val result: Result<List<PlaceData>> = placesLocation.searchPlaces(location, query)\n\nresult.doOnSuccess { places ->\n    // handle success\n}\n\nresult.doOnFailure {\n    // handler failure\n}\n")),Object(l.b)("hr",null))}d.isMDXComponent=!0}}]);